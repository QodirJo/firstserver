// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: HealthRecommendations.proto

package health_sync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthRecommendationService_Create_FullMethodName = "/health_sync.HealthRecommendationService/Create"
	HealthRecommendationService_Update_FullMethodName = "/health_sync.HealthRecommendationService/Update"
	HealthRecommendationService_Delete_FullMethodName = "/health_sync.HealthRecommendationService/Delete"
	HealthRecommendationService_Get_FullMethodName    = "/health_sync.HealthRecommendationService/Get"
	HealthRecommendationService_List_FullMethodName   = "/health_sync.HealthRecommendationService/List"
)

// HealthRecommendationServiceClient is the client API for HealthRecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthRecommendationServiceClient interface {
	Create(ctx context.Context, in *HealthRecommendationCreate, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *HealthRecommendationUpdate, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*HealthRecommendationRes, error)
	List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*GetAllHealthRecommendationsRes, error)
}

type healthRecommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthRecommendationServiceClient(cc grpc.ClientConnInterface) HealthRecommendationServiceClient {
	return &healthRecommendationServiceClient{cc}
}

func (c *healthRecommendationServiceClient) Create(ctx context.Context, in *HealthRecommendationCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, HealthRecommendationService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationServiceClient) Update(ctx context.Context, in *HealthRecommendationUpdate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, HealthRecommendationService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationServiceClient) Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, HealthRecommendationService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationServiceClient) Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*HealthRecommendationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthRecommendationRes)
	err := c.cc.Invoke(ctx, HealthRecommendationService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationServiceClient) List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*GetAllHealthRecommendationsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllHealthRecommendationsRes)
	err := c.cc.Invoke(ctx, HealthRecommendationService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthRecommendationServiceServer is the server API for HealthRecommendationService service.
// All implementations must embed UnimplementedHealthRecommendationServiceServer
// for forward compatibility.
type HealthRecommendationServiceServer interface {
	Create(context.Context, *HealthRecommendationCreate) (*Void, error)
	Update(context.Context, *HealthRecommendationUpdate) (*Void, error)
	Delete(context.Context, *GetById) (*Void, error)
	Get(context.Context, *GetById) (*HealthRecommendationRes, error)
	List(context.Context, *Filter) (*GetAllHealthRecommendationsRes, error)
	mustEmbedUnimplementedHealthRecommendationServiceServer()
}

// UnimplementedHealthRecommendationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthRecommendationServiceServer struct{}

func (UnimplementedHealthRecommendationServiceServer) Create(context.Context, *HealthRecommendationCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) Update(context.Context, *HealthRecommendationUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) Delete(context.Context, *GetById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) Get(context.Context, *GetById) (*HealthRecommendationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) List(context.Context, *Filter) (*GetAllHealthRecommendationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) mustEmbedUnimplementedHealthRecommendationServiceServer() {
}
func (UnimplementedHealthRecommendationServiceServer) testEmbeddedByValue() {}

// UnsafeHealthRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthRecommendationServiceServer will
// result in compilation errors.
type UnsafeHealthRecommendationServiceServer interface {
	mustEmbedUnimplementedHealthRecommendationServiceServer()
}

func RegisterHealthRecommendationServiceServer(s grpc.ServiceRegistrar, srv HealthRecommendationServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthRecommendationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthRecommendationService_ServiceDesc, srv)
}

func _HealthRecommendationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRecommendationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).Create(ctx, req.(*HealthRecommendationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRecommendationUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).Update(ctx, req.(*HealthRecommendationUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).Delete(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).Get(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).List(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthRecommendationService_ServiceDesc is the grpc.ServiceDesc for HealthRecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthRecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health_sync.HealthRecommendationService",
	HandlerType: (*HealthRecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HealthRecommendationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HealthRecommendationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HealthRecommendationService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HealthRecommendationService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _HealthRecommendationService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "HealthRecommendations.proto",
}
