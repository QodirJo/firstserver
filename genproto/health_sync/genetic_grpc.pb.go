// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: genetic.proto

package health_sync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeneticService_CreateGenetic_FullMethodName = "/health_sync.GeneticService/CreateGenetic"
	GeneticService_UpdateGenetic_FullMethodName = "/health_sync.GeneticService/UpdateGenetic"
	GeneticService_DeleteGenetic_FullMethodName = "/health_sync.GeneticService/DeleteGenetic"
	GeneticService_GetGenetic_FullMethodName    = "/health_sync.GeneticService/GetGenetic"
	GeneticService_ListGenetic_FullMethodName   = "/health_sync.GeneticService/ListGenetic"
)

// GeneticServiceClient is the client API for GeneticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneticServiceClient interface {
	CreateGenetic(ctx context.Context, in *GeneticCreate, opts ...grpc.CallOption) (*Void, error)
	UpdateGenetic(ctx context.Context, in *GeneticUpdate, opts ...grpc.CallOption) (*Void, error)
	DeleteGenetic(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error)
	GetGenetic(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*GeneticRes, error)
	ListGenetic(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*GeneticList, error)
}

type geneticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneticServiceClient(cc grpc.ClientConnInterface) GeneticServiceClient {
	return &geneticServiceClient{cc}
}

func (c *geneticServiceClient) CreateGenetic(ctx context.Context, in *GeneticCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, GeneticService_CreateGenetic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneticServiceClient) UpdateGenetic(ctx context.Context, in *GeneticUpdate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, GeneticService_UpdateGenetic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneticServiceClient) DeleteGenetic(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, GeneticService_DeleteGenetic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneticServiceClient) GetGenetic(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*GeneticRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneticRes)
	err := c.cc.Invoke(ctx, GeneticService_GetGenetic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneticServiceClient) ListGenetic(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*GeneticList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneticList)
	err := c.cc.Invoke(ctx, GeneticService_ListGenetic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneticServiceServer is the server API for GeneticService service.
// All implementations must embed UnimplementedGeneticServiceServer
// for forward compatibility.
type GeneticServiceServer interface {
	CreateGenetic(context.Context, *GeneticCreate) (*Void, error)
	UpdateGenetic(context.Context, *GeneticUpdate) (*Void, error)
	DeleteGenetic(context.Context, *GetById) (*Void, error)
	GetGenetic(context.Context, *GetById) (*GeneticRes, error)
	ListGenetic(context.Context, *Filter) (*GeneticList, error)
	mustEmbedUnimplementedGeneticServiceServer()
}

// UnimplementedGeneticServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeneticServiceServer struct{}

func (UnimplementedGeneticServiceServer) CreateGenetic(context.Context, *GeneticCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenetic not implemented")
}
func (UnimplementedGeneticServiceServer) UpdateGenetic(context.Context, *GeneticUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenetic not implemented")
}
func (UnimplementedGeneticServiceServer) DeleteGenetic(context.Context, *GetById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenetic not implemented")
}
func (UnimplementedGeneticServiceServer) GetGenetic(context.Context, *GetById) (*GeneticRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenetic not implemented")
}
func (UnimplementedGeneticServiceServer) ListGenetic(context.Context, *Filter) (*GeneticList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGenetic not implemented")
}
func (UnimplementedGeneticServiceServer) mustEmbedUnimplementedGeneticServiceServer() {}
func (UnimplementedGeneticServiceServer) testEmbeddedByValue()                        {}

// UnsafeGeneticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneticServiceServer will
// result in compilation errors.
type UnsafeGeneticServiceServer interface {
	mustEmbedUnimplementedGeneticServiceServer()
}

func RegisterGeneticServiceServer(s grpc.ServiceRegistrar, srv GeneticServiceServer) {
	// If the following call pancis, it indicates UnimplementedGeneticServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeneticService_ServiceDesc, srv)
}

func _GeneticService_CreateGenetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneticCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticServiceServer).CreateGenetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticService_CreateGenetic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticServiceServer).CreateGenetic(ctx, req.(*GeneticCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneticService_UpdateGenetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneticUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticServiceServer).UpdateGenetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticService_UpdateGenetic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticServiceServer).UpdateGenetic(ctx, req.(*GeneticUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneticService_DeleteGenetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticServiceServer).DeleteGenetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticService_DeleteGenetic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticServiceServer).DeleteGenetic(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneticService_GetGenetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticServiceServer).GetGenetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticService_GetGenetic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticServiceServer).GetGenetic(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneticService_ListGenetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticServiceServer).ListGenetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticService_ListGenetic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticServiceServer).ListGenetic(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneticService_ServiceDesc is the grpc.ServiceDesc for GeneticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health_sync.GeneticService",
	HandlerType: (*GeneticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenetic",
			Handler:    _GeneticService_CreateGenetic_Handler,
		},
		{
			MethodName: "UpdateGenetic",
			Handler:    _GeneticService_UpdateGenetic_Handler,
		},
		{
			MethodName: "DeleteGenetic",
			Handler:    _GeneticService_DeleteGenetic_Handler,
		},
		{
			MethodName: "GetGenetic",
			Handler:    _GeneticService_GetGenetic_Handler,
		},
		{
			MethodName: "ListGenetic",
			Handler:    _GeneticService_ListGenetic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "genetic.proto",
}
