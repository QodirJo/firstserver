// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: Wearable.proto

package health_sync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WearableService_Create_FullMethodName = "/health_sync.WearableService/Create"
	WearableService_Update_FullMethodName = "/health_sync.WearableService/Update"
	WearableService_Delete_FullMethodName = "/health_sync.WearableService/Delete"
	WearableService_Get_FullMethodName    = "/health_sync.WearableService/Get"
	WearableService_List_FullMethodName   = "/health_sync.WearableService/List"
)

// WearableServiceClient is the client API for WearableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WearableServiceClient interface {
	Create(ctx context.Context, in *WearableCreate, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *WearableUpdate, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Wearable, error)
	List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*WearableList, error)
}

type wearableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWearableServiceClient(cc grpc.ClientConnInterface) WearableServiceClient {
	return &wearableServiceClient{cc}
}

func (c *wearableServiceClient) Create(ctx context.Context, in *WearableCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, WearableService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableServiceClient) Update(ctx context.Context, in *WearableUpdate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, WearableService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableServiceClient) Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, WearableService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableServiceClient) Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Wearable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wearable)
	err := c.cc.Invoke(ctx, WearableService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableServiceClient) List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*WearableList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WearableList)
	err := c.cc.Invoke(ctx, WearableService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WearableServiceServer is the server API for WearableService service.
// All implementations must embed UnimplementedWearableServiceServer
// for forward compatibility.
type WearableServiceServer interface {
	Create(context.Context, *WearableCreate) (*Void, error)
	Update(context.Context, *WearableUpdate) (*Void, error)
	Delete(context.Context, *GetById) (*Void, error)
	Get(context.Context, *GetById) (*Wearable, error)
	List(context.Context, *Filter) (*WearableList, error)
	mustEmbedUnimplementedWearableServiceServer()
}

// UnimplementedWearableServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWearableServiceServer struct{}

func (UnimplementedWearableServiceServer) Create(context.Context, *WearableCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWearableServiceServer) Update(context.Context, *WearableUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWearableServiceServer) Delete(context.Context, *GetById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWearableServiceServer) Get(context.Context, *GetById) (*Wearable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWearableServiceServer) List(context.Context, *Filter) (*WearableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWearableServiceServer) mustEmbedUnimplementedWearableServiceServer() {}
func (UnimplementedWearableServiceServer) testEmbeddedByValue()                         {}

// UnsafeWearableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WearableServiceServer will
// result in compilation errors.
type UnsafeWearableServiceServer interface {
	mustEmbedUnimplementedWearableServiceServer()
}

func RegisterWearableServiceServer(s grpc.ServiceRegistrar, srv WearableServiceServer) {
	// If the following call pancis, it indicates UnimplementedWearableServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WearableService_ServiceDesc, srv)
}

func _WearableService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WearableCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServiceServer).Create(ctx, req.(*WearableCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WearableUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServiceServer).Update(ctx, req.(*WearableUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServiceServer).Delete(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServiceServer).Get(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServiceServer).List(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// WearableService_ServiceDesc is the grpc.ServiceDesc for WearableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WearableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health_sync.WearableService",
	HandlerType: (*WearableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WearableService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WearableService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WearableService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WearableService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WearableService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Wearable.proto",
}
